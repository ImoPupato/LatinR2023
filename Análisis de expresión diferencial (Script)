# Análisis de expresión diferencial propiamente dicho (cuando hay un '*', msignifica que puede ser cualquiera de las tres Vav, 1-3)
y <- DGEList(counts=CPM[,-1],group=c(phenotype$PhenoV*) # creación del objeto DGElist.
keep <- filterByExpr(y) # el algoritmo de edgeR permite filtrar aquellos genes que no tienen expresiones muy bajas (elimina aquellas que tienen muchos ceros)
y <- y[keep,,keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
design <- model.matrix(~c(phenotype$PhenoV*) # el diseño viene del criterio antes tomado, en nuestro caso será la expresión de cada una de las tres Vavs. También se puede agregar una interacción, utilizando ' ~ condición A + condición B'
y0 <- estimateDisp(y,design)
et <- exactTest(y0) ç
is.de <- decideTestsDGE(et) 
summary(is.de)

df_etV*<-as.data.frame(topTags(et,n=Inf))
dim(df_etV*) # Just for control
head(df_etV*)
df_etV*$Expression = ifelse(df_etV*$FDR < 0.01 & abs(df_etV*$logFC) >= 1, 
                               ifelse(df_etV*> 1 ,'Up','Down'),
                               'Stable') # luego utilizaremos esta información
df_etV*$Genes = rownames(df_etV*)
write.table(df_etV*, "Exact test (Vav*).txt") # guardar la información

# Realizamos un VULCANO PLOT para visualizar los Genes y su expresión (esto no lo incluí en el poster)
plot <- ggplot(data = df_etV*, 
               aes(x = logFC, 
                   y = -log10(FDR), 
                   colour=Expression
               )) +
  geom_point(alpha=0.4, size=1) +
  scale_color_manual(values=c("blue", "grey","red"))+
  xlim(c(-6,6)) +
  geom_vline(xintercept=c(-0.6,0.6),lty=4,col="black",lwd=0.8) +
  geom_hline(yintercept = 2.001,lty=4,col="black",lwd=0.8) +
  labs(x="log2(fold change)",
       y="-log10 (adj.p-value)",
       title="Differential expression")  +
  theme_bw()+
  theme(plot.title = element_text(hjust = 0.5), 
        legend.position="right",
        legend.title = element_blank())
plot
